#!/bin/bash

set -e

function print_task_json() {
  local TASK_JSON=$1
  local INDENT=$2
  echo "$TASK_JSON" | jq -r -c "\"\
$(for ((I=0;I<$INDENT;I++));do echo -n " "; done)$JQ_REPORT\"" \
  | sed -e "s/^\(.\{$(tput cols)\}\).*$/\1/g"
}

function print_task() {
  local TASK_UUDI=$1
  local INDENT=$2
  CONFIG_OPTIONS="rc.verbose:nothing"
  task $CONFIG_OPTIONS rc.indent.report:$INDENT $UUID $TASK_WARRIOR_REPORT
}

function show_depends() {
  local UUID=$1
  local INDENT=$2
  local CURRENT_DEPTH=$3
  local MAX_DEPTH=$4
  if [ -z "$CURRENT_DEPTH" ]; then
    local CURRENT_DEPTH=0
  fi
  if [ -n "$MAX_DEPTH" ]; then
    if [ $CURRENT_DEPTH -ge $MAX_DEPTH ]; then
      return
    fi
  fi
  local TASK_JSON=$(echo "$TASKS" | jq -c ".[] | select(.uuid==\"$UUID\")")
  if [ -n "$TASK_JSON" ]; then
    if [ $JSON -eq 1 ]; then
      print_task_json "$TASK_JSON" $INDENT
    else
      print_task $UUID $INDENT
    fi
    for CHILD_UUID in $( echo "$TASK_JSON" | jq -r '.depends//""' |tr ',' '\n')
    do
      show_depends $CHILD_UUID $(( INDENT + 3)) $(( CURRENT_DEPTH + 1)) $MAX_DEPTH
    done
  else
    if [ "$SHOW_CLOSED_TASKS" = "1" ]; then
      local TASK_JSON=$(task $UUID export)
      if [ $JSON -eq 1 ]; then
        print_task_json "$TASK_JSON" $INDENT
      else
        print_task $UUID $INDENT
      fi
      for CHILD_UUID in $( echo "$TASK_JSON" | jq -r '.depends//""' |tr ',' '\n')
      do
        show_depends $CHILD_UUID $(( INDENT + 3)) $(( CURRENT_DEPTH + 1))
      done
    fi
  fi
}

function getOptions() {
  while getopts "ajr:m:" options; do
    case $options in
      a )
        SHOW_CLOSED_TASKS=1
        ;;
      j )
        JSON=1
        ;;
      m )
        MAX_DEPTH_TO_SHOW=$OPTARG
        ;;
      r )
        JSON=0
        TASK_WARRIOR_REPORT="$OPTARG"
        ;;
      \? )
        exit 1
        ;;
    esac
  done
  PARSED_OPT_COUNT=$OPTIND
}

IDS=()
: ${OPERATION:="PRINT"}
: ${SHOW_CLOSED_TASKS:=0}
: ${MAX_DEPTH_TO_SHOW:=""}
: ${JSON:=1}
: ${TASK_WARRIOR_REPORT:="ls"}
: ${JQ_REPORT:="\
\(if (.id==0) then (.uuid) else .id end)\
 \(.description)\
\(if (.tags != null) then \" \(.tags)\" else \"\" end)\
"}
TASKS=$(task +BLOCKED or +BLOCKING export | sed -e 's/,$//g' | jq -s -c '.')

getOptions $@
shift $(( PARSED_OPT_COUNT - 1 ));

while true;do
  if [ "$#" -ge 1 ]; then

    if [[ "$1" =~ ^[0-9]*$ ]]; then 
      IDS+=($1)
      shift

    elif [ "$1" = "add" ]; then
      shift
      OPERATION="ADD"

    elif [ "$1" = "move" ]; then
      shift
      OPERATION="MOVE"

    else 
      break
    fi
  else 
    break
  fi
done

if [ "$OPERATION" = "ADD" ];then
  echo "add operation"
  if [ ${#IDS[@]} -ge 1 ];then
    BLOCKED_TASK_ID=${IDS[0]}
    : ${MODS:=''}
    PROJECT=$(task $BLOCKED_TASK_ID export | jq -r '.project//""')
    NEW_TASK_ID=$(task add $@ proj:$PROJECT $MODS | sed 's/^.*task \([0-9]*\)\.$/\1/g')
    task $BLOCKED_TASK_ID mo depends:$NEW_TASK_ID
    echo "$NEW_TASK_ID"
  else
    echo "need one id to add a new child task"
  fi
  exit

elif [ "$OPERATION" = "MOVE" ];then
  echo "move operation"
  if [ ${#IDS[@]} -ge 2 ];then
    TASK_ID=${IDS[0]}
    NEW_PARENT_ID=${IDS[1]}
    if [ "$#" -ge 3 ];then
      OLD_PARENT_ID=$3
    else
      TASK_UUID=$(task $TASK_ID _uuid)
      OLD_PARENT_ID=$(task depends.has:$TASK_UUID id)
    fi
    if [ -n "$OLD_PARENT_ID" ];then
      task $OLD_PARENT_ID modify depends:-$TASK_ID
    fi
    task $NEW_PARENT_ID modify depends:$TASK_ID
  else
    echo "need two ids to move reparent a child task"
  fi
  exit

elif [ "$OPERATION" = "PRINT" ];then
  #UUIDS=$(task status:pending $@ _uuids)
  if [ ${#IDS[@]} -ge 1 ];then
    UUIDS=$(task ${IDS[@]} _uuids)
  else 
    UUIDS=$(task +BLOCKED -BLOCKING $@ _uuids)
  fi
  if [ -n "$UUIDS" ]; then
    for UUID in $UUIDS;do
      show_depends $UUID 0 0 $MAX_DEPTH_TO_SHOW
      echo
    done
  else
    echo "no task found for the filters: $@"
  fi

fi
